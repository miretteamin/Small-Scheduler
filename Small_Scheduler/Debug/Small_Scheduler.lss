
Small_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800060  00800060  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001173  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  00001a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000992  00000000  00000000  000023a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00002d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000884  00000000  00000000  0000381b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000409f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_6>
  1c:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 3a       	cpi	r26, 0xA0	; 160
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  74:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDir>:

		break;

		case DIO_PORTD :

		*Val = GET_BIT(PIND,Pin);
  7c:	44 23       	and	r20, r20
  7e:	b9 f1       	breq	.+110    	; 0xee <DIO_SetPinDir+0x72>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_SetPinDir+0xa>
  84:	6b c0       	rjmp	.+214    	; 0x15c <DIO_SetPinDir+0xe0>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_SetPinDir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_SetPinDir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_SetPinDir+0x5c>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinDir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinDir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_SetPinDir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_SetPinDir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_SetPinDir+0xca>
  fc:	08 95       	ret
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SetPinDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SetPinDir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin>:

}

void DIO_TogglePin(uint8 Port, uint8 Pin)
{
	switch (Port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin+0x52>
 16c:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_BIT(PORTA,Pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
		break;
 182:	08 95       	ret
		
		case DIO_PORTB:
		Toggle_BIT(PORTB,Pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret
		
		case DIO_PORTC:
		Toggle_BIT(PORTC,Pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret
		
		case DIO_PORTD:
		Toggle_BIT(PORTD,Pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <LED0_Toggle>:
	DIO_SetPinDir(DIO_PORTC, DIO_PIN7, DIO_PIN_OUTPUT);
}

void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC, DIO_PIN2);
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1ce:	08 95       	ret

000001d0 <LED1_Toggle>:
}

void LED1_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC, DIO_PIN7);
 1d0:	67 e0       	ldi	r22, 0x07	; 7
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin>
 1d8:	08 95       	ret

000001da <LED0_Init>:

#include "Scheduler.h"

void LED0_Init(void)
{
	DIO_SetPinDir(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 1e4:	08 95       	ret

000001e6 <LED1_Init>:
}

void LED1_Init(void)
{
	DIO_SetPinDir(DIO_PORTC, DIO_PIN7, DIO_PIN_OUTPUT);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDir>
 1f0:	08 95       	ret

000001f2 <main>:
	DIO_TogglePin(DIO_PORTC, DIO_PIN7);
}

int main(void)
{
	LED0_Init();
 1f2:	0e 94 ed 00 	call	0x1da	; 0x1da <LED0_Init>
	LED1_Init();
 1f6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LED1_Init>
	
	Scheduler_Init();
 1fa:	0e 94 2f 01 	call	0x25e	; 0x25e <Scheduler_Init>
	
	Scheduler_TaskCreate(LED0_Toggle, 1000, 1, 10);
 1fe:	2a e0       	ldi	r18, 0x0A	; 10
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	68 ee       	ldi	r22, 0xE8	; 232
 208:	73 e0       	ldi	r23, 0x03	; 3
 20a:	83 ee       	ldi	r24, 0xE3	; 227
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 3e 01 	call	0x27c	; 0x27c <Scheduler_TaskCreate>
	Scheduler_TaskCreate(LED1_Toggle, 500, 2, 20);
 212:	24 e1       	ldi	r18, 0x14	; 20
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	42 e0       	ldi	r20, 0x02	; 2
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	64 ef       	ldi	r22, 0xF4	; 244
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 3e 01 	call	0x27c	; 0x27c <Scheduler_TaskCreate>
	
	Scheduler_Run();
 226:	0e 94 57 01 	call	0x2ae	; 0x2ae <Scheduler_Run>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0x38>

0000022c <Scheduler_LongTerm>:
	
	for (task_nb = 0; task_nb < Total_System_Tasks; task_nb++)
	{
		if(System_Tasks[task_nb].Task_ID == ID)
		{
			System_Tasks[task_nb].status = Deleted;
 22c:	ea e8       	ldi	r30, 0x8A	; 138
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	20 ea       	ldi	r18, 0xA0	; 160
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	42 e0       	ldi	r20, 0x02	; 2
 236:	82 81       	ldd	r24, Z+2	; 0x02
 238:	81 11       	cpse	r24, r1
 23a:	0c c0       	rjmp	.+24     	; 0x254 <Scheduler_LongTerm+0x28>
 23c:	81 85       	ldd	r24, Z+9	; 0x09
 23e:	92 85       	ldd	r25, Z+10	; 0x0a
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	92 87       	std	Z+10, r25	; 0x0a
 244:	81 87       	std	Z+9, r24	; 0x09
 246:	89 2b       	or	r24, r25
 248:	29 f4       	brne	.+10     	; 0x254 <Scheduler_LongTerm+0x28>
 24a:	42 83       	std	Z+2, r20	; 0x02
 24c:	83 81       	ldd	r24, Z+3	; 0x03
 24e:	94 81       	ldd	r25, Z+4	; 0x04
 250:	92 87       	std	Z+10, r25	; 0x0a
 252:	81 87       	std	Z+9, r24	; 0x09
 254:	3b 96       	adiw	r30, 0x0b	; 11
 256:	e2 17       	cp	r30, r18
 258:	f3 07       	cpc	r31, r19
 25a:	69 f7       	brne	.-38     	; 0x236 <Scheduler_LongTerm+0xa>
 25c:	08 95       	ret

0000025e <Scheduler_Init>:
 25e:	0e 94 8b 01 	call	0x316	; 0x316 <Timer_Init>
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 98 01 	call	0x330	; 0x330 <Timer_SetDelay>
 26e:	86 e1       	ldi	r24, 0x16	; 22
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TIMER0_SetCallBack_1>
 276:	0e 94 94 01 	call	0x328	; 0x328 <Timer_Start>
 27a:	08 95       	ret

0000027c <Scheduler_TaskCreate>:
 27c:	d9 01       	movw	r26, r18
 27e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <task_nb.1677>
 282:	2b e0       	ldi	r18, 0x0B	; 11
 284:	32 9f       	mul	r19, r18
 286:	f0 01       	movw	r30, r0
 288:	11 24       	eor	r1, r1
 28a:	e6 57       	subi	r30, 0x76	; 118
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	91 83       	std	Z+1, r25	; 0x01
 290:	80 83       	st	Z, r24
 292:	74 83       	std	Z+4, r23	; 0x04
 294:	63 83       	std	Z+3, r22	; 0x03
 296:	56 83       	std	Z+6, r21	; 0x06
 298:	45 83       	std	Z+5, r20	; 0x05
 29a:	b0 87       	std	Z+8, r27	; 0x08
 29c:	a7 83       	std	Z+7, r26	; 0x07
 29e:	72 87       	std	Z+10, r23	; 0x0a
 2a0:	61 87       	std	Z+9, r22	; 0x09
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	82 83       	std	Z+2, r24	; 0x02
 2a6:	3f 5f       	subi	r19, 0xFF	; 255
 2a8:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <task_nb.1677>
 2ac:	08 95       	ret

000002ae <Scheduler_Run>:

void Scheduler_Run(void)
{
	uint8 task_cnt = 0;
	static uint8 maxPriority = 0;
	uint8 executed_task = 0;
 2ae:	f1 2c       	mov	r15, r1
	
	while(1)
	{
		for (task_cnt = 0; task_cnt < Total_System_Tasks; task_cnt++)
		{
			if(System_Tasks[task_cnt].status == Ready)
 2b0:	0a e8       	ldi	r16, 0x8A	; 138
 2b2:	10 e0       	ldi	r17, 0x00	; 0
	static uint8 maxPriority = 0;
	uint8 executed_task = 0;
	
	while(1)
	{
		for (task_cnt = 0; task_cnt < Total_System_Tasks; task_cnt++)
 2b4:	e1 2c       	mov	r14, r1
 2b6:	cc 24       	eor	r12, r12
 2b8:	c3 94       	inc	r12
					maxPriority = System_Tasks[task_cnt].Priority;
					executed_task =	task_cnt;
				}
			}
		}
		System_Tasks[executed_task].task_ptr();
 2ba:	0f 2e       	mov	r0, r31
 2bc:	fb e0       	ldi	r31, 0x0B	; 11
 2be:	df 2e       	mov	r13, r31
 2c0:	f0 2d       	mov	r31, r0
 2c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while(1)
	{
		for (task_cnt = 0; task_cnt < Total_System_Tasks; task_cnt++)
		{
			if(System_Tasks[task_cnt].status == Ready)
 2c6:	f8 01       	movw	r30, r16
 2c8:	92 81       	ldd	r25, Z+2	; 0x02
 2ca:	92 30       	cpi	r25, 0x02	; 2
 2cc:	49 f4       	brne	.+18     	; 0x2e0 <Scheduler_Run+0x32>
			{
				if(maxPriority <= System_Tasks[task_cnt].Priority)
 2ce:	25 81       	ldd	r18, Z+5	; 0x05
 2d0:	36 81       	ldd	r19, Z+6	; 0x06
 2d2:	48 2f       	mov	r20, r24
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	24 17       	cp	r18, r20
 2d8:	35 07       	cpc	r19, r21
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <Scheduler_Run+0x32>
				{
					maxPriority = System_Tasks[task_cnt].Priority;
 2dc:	82 2f       	mov	r24, r18
	static uint8 maxPriority = 0;
	uint8 executed_task = 0;
	
	while(1)
	{
		for (task_cnt = 0; task_cnt < Total_System_Tasks; task_cnt++)
 2de:	fe 2c       	mov	r15, r14
		{
			if(System_Tasks[task_cnt].status == Ready)
 2e0:	f8 01       	movw	r30, r16
 2e2:	95 85       	ldd	r25, Z+13	; 0x0d
 2e4:	92 30       	cpi	r25, 0x02	; 2
 2e6:	49 f4       	brne	.+18     	; 0x2fa <Scheduler_Run+0x4c>
			{
				if(maxPriority <= System_Tasks[task_cnt].Priority)
 2e8:	20 89       	ldd	r18, Z+16	; 0x10
 2ea:	31 89       	ldd	r19, Z+17	; 0x11
 2ec:	48 2f       	mov	r20, r24
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	24 17       	cp	r18, r20
 2f2:	35 07       	cpc	r19, r21
 2f4:	10 f0       	brcs	.+4      	; 0x2fa <Scheduler_Run+0x4c>
				{
					maxPriority = System_Tasks[task_cnt].Priority;
 2f6:	82 2f       	mov	r24, r18
	static uint8 maxPriority = 0;
	uint8 executed_task = 0;
	
	while(1)
	{
		for (task_cnt = 0; task_cnt < Total_System_Tasks; task_cnt++)
 2f8:	fc 2c       	mov	r15, r12
 2fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					maxPriority = System_Tasks[task_cnt].Priority;
					executed_task =	task_cnt;
				}
			}
		}
		System_Tasks[executed_task].task_ptr();
 2fe:	df 9c       	mul	r13, r15
 300:	e0 01       	movw	r28, r0
 302:	11 24       	eor	r1, r1
 304:	c6 57       	subi	r28, 0x76	; 118
 306:	df 4f       	sbci	r29, 0xFF	; 255
 308:	e8 81       	ld	r30, Y
 30a:	f9 81       	ldd	r31, Y+1	; 0x01
 30c:	09 95       	icall
		System_Tasks[executed_task].status = Waiting;
 30e:	1a 82       	std	Y+2, r1	; 0x02
		
		maxPriority = 0;
 310:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 314:	d6 cf       	rjmp	.-84     	; 0x2c2 <Scheduler_Run+0x14>

00000316 <Timer_Init>:
	
	ICR1 = 0x0000;
	TCCR1B |= 0x41 ;
	
	TIMSK |= 0X24;
	SREG |= 0x80;
 316:	83 b7       	in	r24, 0x33	; 51
 318:	83 bf       	out	0x33, r24	; 51
 31a:	89 b7       	in	r24, 0x39	; 57
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	89 bf       	out	0x39, r24	; 57
 320:	8f b7       	in	r24, 0x3f	; 63
 322:	80 68       	ori	r24, 0x80	; 128
 324:	8f bf       	out	0x3f, r24	; 63
 326:	08 95       	ret

00000328 <Timer_Start>:
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	85 60       	ori	r24, 0x05	; 5
 32c:	83 bf       	out	0x33, r24	; 51
 32e:	08 95       	ret

00000330 <Timer_SetDelay>:
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	a8 ee       	ldi	r26, 0xE8	; 232
 33a:	b3 e0       	ldi	r27, 0x03	; 3
 33c:	0e 94 44 03 	call	0x688	; 0x688 <__muluhisi3>
 340:	8b 01       	movw	r16, r22
 342:	9c 01       	movw	r18, r24
 344:	0f 2e       	mov	r0, r31
 346:	fe e0       	ldi	r31, 0x0E	; 14
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	17 95       	ror	r17
 34e:	07 95       	ror	r16
 350:	fa 95       	dec	r31
 352:	d1 f7       	brne	.-12     	; 0x348 <Timer_SetDelay+0x18>
 354:	f0 2d       	mov	r31, r0
 356:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <Number_OverFlows>
 35a:	10 93 82 00 	sts	0x0082, r17	; 0x800082 <Number_OverFlows+0x1>
 35e:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <Number_OverFlows+0x2>
 362:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <Number_OverFlows+0x3>
 366:	dc 01       	movw	r26, r24
 368:	cb 01       	movw	r24, r22
 36a:	68 94       	set
 36c:	15 f8       	bld	r1, 5
 36e:	b6 95       	lsr	r27
 370:	a7 95       	ror	r26
 372:	97 95       	ror	r25
 374:	87 95       	ror	r24
 376:	16 94       	lsr	r1
 378:	d1 f7       	brne	.-12     	; 0x36e <Timer_SetDelay+0x3e>
 37a:	68 2f       	mov	r22, r24
 37c:	61 95       	neg	r22
 37e:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <CounterRegister_InitValue>
 382:	62 bf       	out	0x32, r22	; 50
 384:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Number_OverFlows>
 388:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Number_OverFlows+0x1>
 38c:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <Number_OverFlows+0x2>
 390:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <Number_OverFlows+0x3>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	a1 1d       	adc	r26, r1
 398:	b1 1d       	adc	r27, r1
 39a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Number_OverFlows>
 39e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <Number_OverFlows+0x1>
 3a2:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <Number_OverFlows+0x2>
 3a6:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <Number_OverFlows+0x3>
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <TIMER0_SetCallBack_1>:
 3b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <timer0_ptr_func+0x1>
 3b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <timer0_ptr_func>
 3b8:	08 95       	ret

000003ba <__vector_11>:
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
 3dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <counter.1649>
 3e0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <counter.1649+0x1>
 3e4:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <counter.1649+0x2>
 3e8:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <counter.1649+0x3>
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	a1 1d       	adc	r26, r1
 3f0:	b1 1d       	adc	r27, r1
 3f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <counter.1649>
 3f6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <counter.1649+0x1>
 3fa:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <counter.1649+0x2>
 3fe:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <counter.1649+0x3>
 402:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <Number_OverFlows>
 406:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <Number_OverFlows+0x1>
 40a:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <Number_OverFlows+0x2>
 40e:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <Number_OverFlows+0x3>
 412:	84 17       	cp	r24, r20
 414:	95 07       	cpc	r25, r21
 416:	a6 07       	cpc	r26, r22
 418:	b7 07       	cpc	r27, r23
 41a:	a9 f4       	brne	.+42     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 41c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <CounterRegister_InitValue>
 420:	82 bf       	out	0x32, r24	; 50
 422:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter.1649>
 426:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter.1649+0x1>
 42a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <counter.1649+0x2>
 42e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counter.1649+0x3>
 432:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <timer0_ptr_func>
 436:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <timer0_ptr_func+0x1>
 43a:	09 95       	icall
 43c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <timer0_ptr_func_2>
 440:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <timer0_ptr_func_2+0x1>
 444:	09 95       	icall
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_7>:
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
 48a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.1673>
 48e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter.1673+0x1>
 492:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <counter.1673+0x2>
 496:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <counter.1673+0x3>
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	a1 1d       	adc	r26, r1
 49e:	b1 1d       	adc	r27, r1
 4a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter.1673>
 4a4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter.1673+0x1>
 4a8:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <counter.1673+0x2>
 4ac:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <counter.1673+0x3>
 4b0:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <Num_CompMatch>
 4b4:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <Num_CompMatch+0x1>
 4b8:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Num_CompMatch+0x2>
 4bc:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <Num_CompMatch+0x3>
 4c0:	84 17       	cp	r24, r20
 4c2:	95 07       	cpc	r25, r21
 4c4:	a6 07       	cpc	r26, r22
 4c6:	b7 07       	cpc	r27, r23
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <__vector_7+0x7c>
 4ca:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter.1673>
 4ce:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter.1673+0x1>
 4d2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter.1673+0x2>
 4d6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter.1673+0x3>
 4da:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <timer1_ptr_func>
 4de:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <timer1_ptr_func+0x1>
 4e2:	09 95       	icall
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_6>:




ISR(TIMER1_CAPT_vect)
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
	Cap_Counter ++;
 528:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Cap_Counter>
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Cap_Counter>
	
	if( Cap_Counter == 1)
 532:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Cap_Counter>
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	c1 f4       	brne	.+48     	; 0x56a <__vector_6+0x64>
	{
		ICU_ReadCapturedVal_1 = ICR1 ;
 53a:	86 b5       	in	r24, 0x26	; 38
 53c:	97 b5       	in	r25, 0x27	; 39
 53e:	a0 e0       	ldi	r26, 0x00	; 0
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <ICU_ReadCapturedVal_1>
 546:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <ICU_ReadCapturedVal_1+0x1>
 54a:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <ICU_ReadCapturedVal_1+0x2>
 54e:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <ICU_ReadCapturedVal_1+0x3>
		
		Timer1_Number_OverFlows = 0;
 552:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Timer1_Number_OverFlows>
 556:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Timer1_Number_OverFlows+0x1>
 55a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Timer1_Number_OverFlows+0x2>
 55e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Timer1_Number_OverFlows+0x3>
		
		CLR_BIT(TCCR1B , 6);
 562:	8e b5       	in	r24, 0x2e	; 46
 564:	8f 7b       	andi	r24, 0xBF	; 191
 566:	8e bd       	out	0x2e, r24	; 46
 568:	4a c0       	rjmp	.+148    	; 0x5fe <__vector_6+0xf8>
	}
	
	else if(Cap_Counter == 2)
 56a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Cap_Counter>
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	01 f5       	brne	.+64     	; 0x5b2 <__vector_6+0xac>
	{
		ICU_ReadCapturedVal_2 = ICR1 + (Timer1_Number_OverFlows * 65535);
 572:	e6 b5       	in	r30, 0x26	; 38
 574:	f7 b5       	in	r31, 0x27	; 39
 576:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <Timer1_Number_OverFlows>
 57a:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <Timer1_Number_OverFlows+0x1>
 57e:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <Timer1_Number_OverFlows+0x2>
 582:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <Timer1_Number_OverFlows+0x3>
 586:	af ef       	ldi	r26, 0xFF	; 255
 588:	bf ef       	ldi	r27, 0xFF	; 255
 58a:	0e 94 44 03 	call	0x688	; 0x688 <__muluhisi3>
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22
 592:	8e 0f       	add	r24, r30
 594:	9f 1f       	adc	r25, r31
 596:	a1 1d       	adc	r26, r1
 598:	b1 1d       	adc	r27, r1
 59a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ICU_ReadCapturedVal_2>
 59e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ICU_ReadCapturedVal_2+0x1>
 5a2:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <ICU_ReadCapturedVal_2+0x2>
 5a6:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <ICU_ReadCapturedVal_2+0x3>
		
		SET_BIT(TCCR1B , 6);
 5aa:	8e b5       	in	r24, 0x2e	; 46
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	8e bd       	out	0x2e, r24	; 46
 5b0:	26 c0       	rjmp	.+76     	; 0x5fe <__vector_6+0xf8>
		
	}
	
	else if(Cap_Counter == 3)
 5b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Cap_Counter>
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	11 f5       	brne	.+68     	; 0x5fe <__vector_6+0xf8>
	{
		ICU_ReadCapturedVal_3 = ICR1 + (Timer1_Number_OverFlows * 65535);
 5ba:	e6 b5       	in	r30, 0x26	; 38
 5bc:	f7 b5       	in	r31, 0x27	; 39
 5be:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <Timer1_Number_OverFlows>
 5c2:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <Timer1_Number_OverFlows+0x1>
 5c6:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <Timer1_Number_OverFlows+0x2>
 5ca:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <Timer1_Number_OverFlows+0x3>
 5ce:	af ef       	ldi	r26, 0xFF	; 255
 5d0:	bf ef       	ldi	r27, 0xFF	; 255
 5d2:	0e 94 44 03 	call	0x688	; 0x688 <__muluhisi3>
 5d6:	dc 01       	movw	r26, r24
 5d8:	cb 01       	movw	r24, r22
 5da:	8e 0f       	add	r24, r30
 5dc:	9f 1f       	adc	r25, r31
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ICU_ReadCapturedVal_3>
 5e6:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ICU_ReadCapturedVal_3+0x1>
 5ea:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <ICU_ReadCapturedVal_3+0x2>
 5ee:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <ICU_ReadCapturedVal_3+0x3>
		//SET_BIT(PORTB , 7);
		CLR_BIT(TCCR1B , 6) ;
 5f2:	8e b5       	in	r24, 0x2e	; 46
 5f4:	8f 7b       	andi	r24, 0xBF	; 191
 5f6:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TIMSK , 5) ;
 5f8:	89 b7       	in	r24, 0x39	; 57
 5fa:	8f 7d       	andi	r24, 0xDF	; 223
 5fc:	89 bf       	out	0x39, r24	; 57
		
	}
	
}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
	Timer1_Number_OverFlows ++;
 632:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Timer1_Number_OverFlows>
 636:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Timer1_Number_OverFlows+0x1>
 63a:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <Timer1_Number_OverFlows+0x2>
 63e:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <Timer1_Number_OverFlows+0x3>
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	a1 1d       	adc	r26, r1
 646:	b1 1d       	adc	r27, r1
 648:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer1_Number_OverFlows>
 64c:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer1_Number_OverFlows+0x1>
 650:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <Timer1_Number_OverFlows+0x2>
 654:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <Timer1_Number_OverFlows+0x3>
 658:	bf 91       	pop	r27
 65a:	af 91       	pop	r26
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <__umulhisi3>:
 66a:	a2 9f       	mul	r26, r18
 66c:	b0 01       	movw	r22, r0
 66e:	b3 9f       	mul	r27, r19
 670:	c0 01       	movw	r24, r0
 672:	a3 9f       	mul	r26, r19
 674:	70 0d       	add	r23, r0
 676:	81 1d       	adc	r24, r1
 678:	11 24       	eor	r1, r1
 67a:	91 1d       	adc	r25, r1
 67c:	b2 9f       	mul	r27, r18
 67e:	70 0d       	add	r23, r0
 680:	81 1d       	adc	r24, r1
 682:	11 24       	eor	r1, r1
 684:	91 1d       	adc	r25, r1
 686:	08 95       	ret

00000688 <__muluhisi3>:
 688:	0e 94 35 03 	call	0x66a	; 0x66a <__umulhisi3>
 68c:	a5 9f       	mul	r26, r21
 68e:	90 0d       	add	r25, r0
 690:	b4 9f       	mul	r27, r20
 692:	90 0d       	add	r25, r0
 694:	a4 9f       	mul	r26, r20
 696:	80 0d       	add	r24, r0
 698:	91 1d       	adc	r25, r1
 69a:	11 24       	eor	r1, r1
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
